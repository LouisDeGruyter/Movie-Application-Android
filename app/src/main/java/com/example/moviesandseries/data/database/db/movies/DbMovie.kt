package com.example.moviesandseries.data.database.db.movies

import androidx.room.Entity
import androidx.room.PrimaryKey
import androidx.room.TypeConverters
import com.example.moviesandseries.data.database.converters.movie.CollectionConverter
import com.example.moviesandseries.data.database.converters.GenreConverter
import com.example.moviesandseries.data.database.db.DbGenre
import com.example.moviesandseries.data.database.db.DbProductionCompany
import com.example.moviesandseries.data.database.db.DbProductionCountry
import com.example.moviesandseries.data.database.db.DbSpokenLanguage
import com.example.moviesandseries.data.database.db.asDbObject
import com.example.moviesandseries.data.database.db.asDomainObject
import com.example.moviesandseries.domain.movie.Movie

/**
 * Represents a database entity for movies.
 *
 * @property adult Indicates if the movie is intended for adults.
 * @property backdropPath The backdrop path for the movie.
 * @property belongsToCollection The collection to which the movie belongs.
 * @property budget The budget of the movie.
 * @property genres The genres associated with the movie.
 * @property homepage The homepage URL of the movie.
 * @property id The unique identifier for the movie (primary key).
 * @property imdbId The IMDb identifier of the movie.
 * @property originalLanguage The original language of the movie.
 * @property originalTitle The original title of the movie.
 * @property overview The overview or description of the movie.
 * @property popularity The popularity score of the movie.
 * @property posterPath The poster path for the movie.
 * @property productionCompanies The production companies involved in the movie.
 * @property productionCountries The production countries of the movie.
 * @property releaseDate The release date of the movie.
 * @property revenue The revenue generated by the movie.
 * @property runtime The runtime of the movie.
 * @property spokenLanguages The spoken languages in the movie.
 * @property status The status of the movie (e.g., Released).
 * @property tagline The tagline of the movie.
 * @property title The title of the movie.
 * @property video Indicates if there is a video available for the movie.
 * @property voteAverage The average vote score for the movie.
 * @property voteCount The total number of votes for the movie.
 * @property isFavorite Indicates if the movie is marked as a favorite.
 */
@Entity(tableName = "movies")
@TypeConverters(CollectionConverter::class, GenreConverter::class)
data class DbMovie(
    var adult: Boolean = false,
    var backdropPath: String = "",
    var belongsToCollection: DbCollection = DbCollection(),
    var budget: Int = 0,
    var genres: List<DbGenre> = listOf(),
    var homepage: String = "",
    @PrimaryKey
    var id: Int = 0,
    var imdbId: String = "",
    var originalLanguage: String = "",
    var originalTitle: String = "",
    var overview: String = "",
    var popularity: Double = 0.0,
    var posterPath: String = "",
    var productionCompanies: List<DbProductionCompany> = listOf(),
    var productionCountries: List<DbProductionCountry> = listOf(),
    var releaseDate: String = "",
    var revenue: Int = 0,
    var runtime: Int = 0,
    var spokenLanguages: List<DbSpokenLanguage> = listOf(),
    var status: String = "",
    var tagline: String = "",
    var title: String = "",
    var video: Boolean = false,
    var voteAverage: Double = 0.0,
    var voteCount: Int = 0,
    var isFavorite: Boolean = false,
)

/**
 * Extension function to convert a [Movie] domain object to a [DbMovie] database object.
 *
 * @return The corresponding [DbMovie] object.
 */
fun Movie.asDbObject(): DbMovie = DbMovie(
    adult = this.adult,
    backdropPath = this.backdropPath,
    belongsToCollection = this.belongsToCollection.asDbObject(),
    budget = this.budget,
    genres = this.genres.map { it.asDbObject() },
    homepage = this.homepage,
    id = this.id,
    imdbId = this.imdbId,
    originalLanguage = this.originalLanguage,
    originalTitle = this.originalTitle,
    overview = this.overview,
    popularity = this.popularity,
    posterPath = this.posterPath,
    productionCompanies = this.productionCompanies.map { it.asDbObject() },
    productionCountries = this.productionCountries.map { it.asDbObject() },
    releaseDate = this.releaseDate,
    revenue = this.revenue,
    runtime = this.runtime,
    spokenLanguages = this.spokenLanguages.map { it.asDbObject() },
    status = this.status,
    tagline = this.tagline,
    title = this.title,
    video = this.video,
    voteAverage = this.voteAverage,
    voteCount = this.voteCount,
    isFavorite = isFavorite,
)

/**
 * Extension function to convert a [DbMovie] database object to a [Movie] domain object.
 *
 * @return The corresponding [Movie] object.
 */
fun DbMovie.asDomainObject(): Movie = Movie(
    adult = this.adult,
    backdropPath = this.backdropPath,
    belongsToCollection = this.belongsToCollection.asDomainObject(),
    budget = this.budget,
    genres = this.genres.map { it.asDomainObject() },
    homepage = this.homepage,
    id = this.id,
    imdbId = this.imdbId,
    originalLanguage = this.originalLanguage,
    originalTitle = this.originalTitle,
    overview = this.overview,
    popularity = this.popularity,
    posterPath = this.posterPath,
    productionCompanies = this.productionCompanies.map { it.asDomainObject() },
    productionCountries = this.productionCountries.map { it.asDomainObject() },
    releaseDate = this.releaseDate,
    revenue = this.revenue,
    runtime = this.runtime,
    spokenLanguages = this.spokenLanguages.map { it.asDomainObject() },
    status = this.status,
    tagline = this.tagline,
    title = this.title,
    video = this.video,
    voteAverage = this.voteAverage,
    voteCount = this.voteCount,
    isFavorite = isFavorite,
)

/**
 * Extension function to convert a list of [DbMovie] database objects to a list of [Movie] domain objects.
 *
 * @return The corresponding list of [Movie] objects.
 */
fun List<DbMovie>.asDomainObject() = this.map { it.asDomainObject() }
